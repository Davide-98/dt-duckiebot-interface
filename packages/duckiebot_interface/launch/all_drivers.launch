<launch>
    <arg name="veh" doc="Name of vehicle. ex: megaman"/>
    <arg name="param_file_name" default="default" doc="Specify a param file. ex:default." />
    <arg name="robot_type" default="duckiebot" doc="The type of the robot"/>

    <!-- Joystick: reads from a physical joystick and produces ROS messages -->
    <include file="$(find joystick)/launch/joystick_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>

    <!-- Camera Node: reads frames from a physical camera and produces ROS messages -->
    <!--              publishes info about the camera (e.g., calibration) as ROS messages -->
    <include file="$(find camera_driver)/launch/camera_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>

    <!-- Wheel Drivers: reads ROS messages and spins the motors -->
    <include file="$(find wheels_driver)/launch/wheels_driver_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>

    <!-- LED Emitter: reads ROS messages and commands the LEDs -->
    <include file="$(find led_emitter)/launch/led_emitter_node.launch">
        <arg name="veh" value="$(arg veh)"/>
    </include>

    <!-- Traffic Light (Traffic Light robot only): commands the LEDs of a traffic light -->
    <group if="$(eval arg('robot_type') == 'traffic_light')">
      <remap from="led_emitter_node/custom_pattern" to="~custom_pattern"/>
    	<include file="$(find traffic_light)/launch/traffic_light_node.launch"></include>
    </group>

    <!-- Joy Mapper: reads raw joy commands and trigger actions in Duckietown (e.g., move robot, start LF) -->
    <include file="$(find joy_mapper)/launch/joy_mapper_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>

    <!-- Inverse Kinematics: turns chassis-level commands into wheels-level commands -->
    <remap from="inverse_kinematics_node/car_cmd" to="joy_mapper_node/car_cmd"/>
    <remap from="inverse_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd" />
    <include file="$(find dagu_car)/launch/inverse_kinematics_node.launch">
        <arg name="veh" value="$(arg veh)"/>
    </include>

    <!-- Forward Kinematics: turns wheels-level commands into chassis-level velocities -->
    <remap from="forward_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd_executed" />
    <include file="$(find dagu_car)/launch/forward_kinematics_node.launch">
        <arg name="veh" value="$(arg veh)"/>
    </include>

    <!-- Velocity To Pose (Odometry): turns chassis-level velocities into chassis pose -->
    <remap from="velocity_to_pose_node/velocity" to="forward_kinematics_node/velocity" />
    <include file="$(find dagu_car)/launch/velocity_to_pose_node.launch">
        <arg name="veh" value="$(arg veh)"/>
    </include>

</launch>
